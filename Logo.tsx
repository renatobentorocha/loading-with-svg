import React from 'react';
import { Dimensions } from "react-native";
import { Svg, G, Path  } from "react-native-svg";
import Animated, {interpolate, Extrapolate, multiply} from "react-native-reanimated";

const {width, height} = Dimensions.get("window")
const AnimatedPath = Animated.createAnimatedComponent(Path);

type LoadingWithSVGProps = {
  progress: Animated.Value<number>
}

const paths = [
  "M4.36328 24.2402H16.4922V27H0.970703V1.40625H4.36328V24.2402Z",
  "M18.9707 17.3145C18.9707 15.4512 19.334 13.7754 20.0605 12.2871C20.7988 10.7988 21.8184 9.65039 23.1191 8.8418C24.4316 8.0332 25.9258 7.62891 27.6016 7.62891C30.1914 7.62891 32.2832 8.52539 33.877 10.3184C35.4824 12.1113 36.2852 14.4961 36.2852 17.4727V17.7012C36.2852 19.5527 35.9277 21.2168 35.2129 22.6934C34.5098 24.1582 33.4961 25.3008 32.1719 26.1211C30.8594 26.9414 29.3477 27.3516 27.6367 27.3516C25.0586 27.3516 22.9668 26.4551 21.3613 24.6621C19.7676 22.8691 18.9707 20.4961 18.9707 17.543V17.3145ZM22.2402 17.7012C22.2402 19.8105 22.7266 21.5039 23.6992 22.7812C24.6836 24.0586 25.9961 24.6973 27.6367 24.6973C29.2891 24.6973 30.6016 24.0527 31.5742 22.7637C32.5469 21.4629 33.0332 19.6465 33.0332 17.3145C33.0332 15.2285 32.5352 13.541 31.5391 12.252C30.5547 10.9512 29.2422 10.3008 27.6016 10.3008C25.9961 10.3008 24.7012 10.9395 23.7168 12.2168C22.7324 13.4941 22.2402 15.3223 22.2402 17.7012Z",
  "M52.1055 27C51.918 26.625 51.7656 25.957 51.6484 24.9961C50.1367 26.5664 48.332 27.3516 46.2344 27.3516C44.3594 27.3516 42.8184 26.8242 41.6113 25.7695C40.416 24.7031 39.8184 23.3555 39.8184 21.7266C39.8184 19.7461 40.5684 18.2109 42.0684 17.1211C43.5801 16.0195 45.7012 15.4688 48.4316 15.4688H51.5957V13.9746C51.5957 12.8379 51.2559 11.9355 50.5762 11.2676C49.8965 10.5879 48.8945 10.248 47.5703 10.248C46.4102 10.248 45.4375 10.541 44.6523 11.127C43.8672 11.7129 43.4746 12.4219 43.4746 13.2539H40.2051C40.2051 12.3047 40.5391 11.3906 41.207 10.5117C41.8867 9.62109 42.8008 8.91797 43.9492 8.40234C45.1094 7.88672 46.3809 7.62891 47.7637 7.62891C49.9551 7.62891 51.6719 8.17969 52.9141 9.28125C54.1562 10.3711 54.8008 11.877 54.8477 13.7988V22.5527C54.8477 24.2988 55.0703 25.6875 55.5156 26.7188V27H52.1055ZM46.709 24.5215C47.7285 24.5215 48.6953 24.2578 49.6094 23.7305C50.5234 23.2031 51.1855 22.5176 51.5957 21.6738V17.7715H49.0469C45.0625 17.7715 43.0703 18.9375 43.0703 21.2695C43.0703 22.2891 43.4102 23.0859 44.0898 23.6602C44.7695 24.2344 45.6426 24.5215 46.709 24.5215Z",
  "M59.1543 17.332C59.1543 14.4141 59.8457 12.0703 61.2285 10.3008C62.6113 8.51953 64.4219 7.62891 66.6602 7.62891C68.8867 7.62891 70.6504 8.39062 71.9512 9.91406V0H75.2031V27H72.2148L72.0566 24.9609C70.7559 26.5547 68.9453 27.3516 66.625 27.3516C64.4219 27.3516 62.623 26.4492 61.2285 24.6445C59.8457 22.8398 59.1543 20.4844 59.1543 17.5781V17.332ZM62.4062 17.7012C62.4062 19.8574 62.8516 21.5449 63.7422 22.7637C64.6328 23.9824 65.8633 24.5918 67.4336 24.5918C69.4961 24.5918 71.002 23.666 71.9512 21.8145V13.0781C70.9785 11.2852 69.4844 10.3887 67.4688 10.3887C65.875 10.3887 64.6328 11.0039 63.7422 12.2344C62.8516 13.4648 62.4062 15.2871 62.4062 17.7012Z",
  "M83.7988 27H80.5469V7.98047H83.7988V27ZM80.2832 2.93555C80.2832 2.4082 80.4414 1.96289 80.7578 1.59961C81.0859 1.23633 81.5664 1.05469 82.1992 1.05469C82.832 1.05469 83.3125 1.23633 83.6406 1.59961C83.9688 1.96289 84.1328 2.4082 84.1328 2.93555C84.1328 3.46289 83.9688 3.90234 83.6406 4.25391C83.3125 4.60547 82.832 4.78125 82.1992 4.78125C81.5664 4.78125 81.0859 4.60547 80.7578 4.25391C80.4414 3.90234 80.2832 3.46289 80.2832 2.93555Z",
  "M92.0957 7.98047L92.2012 10.3711C93.6543 8.54297 95.5527 7.62891 97.8965 7.62891C101.916 7.62891 103.943 9.89648 103.979 14.4316V27H100.727V14.4141C100.715 13.043 100.398 12.0293 99.7773 11.373C99.168 10.7168 98.2129 10.3887 96.9121 10.3887C95.8574 10.3887 94.9316 10.6699 94.1348 11.2324C93.3379 11.7949 92.7168 12.5332 92.2715 13.4473V27H89.0195V7.98047H92.0957Z",
  "M108.109 17.332C108.109 14.3672 108.795 12.0117 110.166 10.2656C111.537 8.50781 113.354 7.62891 115.615 7.62891C117.936 7.62891 119.746 8.44922 121.047 10.0898L121.205 7.98047H124.176V26.543C124.176 29.0039 123.443 30.9434 121.979 32.3613C120.525 33.7793 118.568 34.4883 116.107 34.4883C114.736 34.4883 113.395 34.1953 112.082 33.6094C110.77 33.0234 109.768 32.2207 109.076 31.2012L110.764 29.25C112.158 30.9727 113.863 31.834 115.879 31.834C117.461 31.834 118.691 31.3887 119.57 30.498C120.461 29.6074 120.906 28.3535 120.906 26.7363V25.1016C119.605 26.6016 117.83 27.3516 115.58 27.3516C113.354 27.3516 111.549 26.4551 110.166 24.6621C108.795 22.8691 108.109 20.4258 108.109 17.332ZM111.379 17.7012C111.379 19.8457 111.818 21.5332 112.697 22.7637C113.576 23.9824 114.807 24.5918 116.389 24.5918C118.439 24.5918 119.945 23.6602 120.906 21.7969V13.1133C119.91 11.2969 118.416 10.3887 116.424 10.3887C114.842 10.3887 113.605 11.0039 112.715 12.2344C111.824 13.4648 111.379 15.2871 111.379 17.7012Z",
  "M129.168 25.2949C129.168 24.7324 129.332 24.2637 129.66 23.8887C130 23.5137 130.504 23.3262 131.172 23.3262C131.84 23.3262 132.344 23.5137 132.684 23.8887C133.035 24.2637 133.211 24.7324 133.211 25.2949C133.211 25.834 133.035 26.2852 132.684 26.6484C132.344 27.0117 131.84 27.1934 131.172 27.1934C130.504 27.1934 130 27.0117 129.66 26.6484C129.332 26.2852 129.168 25.834 129.168 25.2949Z",
  "M138.66 25.2949C138.66 24.7324 138.824 24.2637 139.152 23.8887C139.492 23.5137 139.996 23.3262 140.664 23.3262C141.332 23.3262 141.836 23.5137 142.176 23.8887C142.527 24.2637 142.703 24.7324 142.703 25.2949C142.703 25.834 142.527 26.2852 142.176 26.6484C141.836 27.0117 141.332 27.1934 140.664 27.1934C139.996 27.1934 139.492 27.0117 139.152 26.6484C138.824 26.2852 138.66 25.834 138.66 25.2949Z",
  "M148.152 25.2949C148.152 24.7324 148.316 24.2637 148.645 23.8887C148.984 23.5137 149.488 23.3262 150.156 23.3262C150.824 23.3262 151.328 23.5137 151.668 23.8887C152.02 24.2637 152.195 24.7324 152.195 25.2949C152.195 25.834 152.02 26.2852 151.668 26.6484C151.328 27.0117 150.824 27.1934 150.156 27.1934C149.488 27.1934 148.984 27.0117 148.645 26.6484C148.316 26.2852 148.152 25.834 148.152 25.2949Z",
];

const LoadingWithSVG: React.FC<LoadingWithSVGProps> = ({progress}) => {
  const delta = 1 / paths.length;
  const H = height*0.2;
  
  return (
    <Svg
      height={H} 
      width={width} 
      preserveAspectRatio="xMidYMid meet">
        <G x={(width/2) - (154.5/2)} y={H/2}>
        {
          paths.map((p, i) => {
            const start = i * delta;
            const end = start + delta;

            const scale = interpolate(progress, {
              inputRange: [start, end],
              outputRange: [1, 1.2],
              extrapolate: Extrapolate.CLAMP,
            });
            
            return (
              <AnimatedPath fill={"#B620E0"} fillOpacity={progress} key={i} style={
                {
                  transform: [
                    {translateX: multiply(scale, 10) },
                    {translateY: multiply(scale, 10) },
                    { scale },
                    {translateX: multiply(scale, -10) },
                    {translateY: multiply(scale, -10) },
                  ]
                }
              } 
              d={p} stroke="#1FAAE0" />    
            )}
          )
        } 
        </G>
    </Svg>
  );
}

export default LoadingWithSVG;