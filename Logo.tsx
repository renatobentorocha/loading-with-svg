import React from 'react';
import { Dimensions } from "react-native";
import { Svg, G, Path  } from "react-native-svg";
import Animated, {interpolate, Extrapolate, multiply} from "react-native-reanimated";

const {width, height} = Dimensions.get("window")
const AnimatedPath = Animated.createAnimatedComponent(Path);

type LoadingWithSVGProps = {
  progress: Animated.Value<number>
}

const paths = [
  "M4.26890236,0 L4.25784971,7.57794086 C4.72755958,7.20324991 5.25870032,6.91895327 5.82587775,6.73864364 C6.35939308,6.5745667 6.91323977,6.49185795 7.46988771,6.4931349 C8.46100376,6.48806038 9.44249826,6.6940814 10.3531245,7.09834239 C11.2328403,7.48640586 12.0306594,8.04838471 12.7017107,8.75267155 C13.3721004,9.46091787 13.9073364,10.2933234 14.2794085,11.2063315 C14.6677028,12.1513566 14.8642456,13.168631 14.8568843,14.1952575 L14.8430698,23.9999054 L10.5783122,23.9999054 L10.5935083,14.1952575 L10.6183768,14.1952575 C10.6212275,13.757511 10.5375491,13.3237717 10.3724654,12.9206104 C10.0534101,12.1275968 9.44783412,11.4942403 8.68424605,11.1549459 C8.29782092,10.9826192 7.8810975,10.8946615 7.4602179,10.8965908 C7.02934216,10.8932059 6.60223021,10.9796189 6.20441465,11.1506638 C5.43324439,11.4783539 4.81888366,12.107975 4.49547162,12.9020545 C4.32900244,13.304417 4.24390818,13.7376951 4.24541674,14.1752742 L4.23298251,23.9799221 L0,23.9799221 L0.0359198569,0 L4.26890236,0 Z",
  "M21.9463164,6.8571158 L21.9325031,16.1493507 C21.9236587,16.6657586 22.0098463,17.1793214 22.1866621,17.6637962 C22.3406361,18.0797171 22.5754898,18.4601283 22.8773146,18.7825002 C23.162403,19.0840811 23.5081629,19.3201396 23.8911912,19.4746982 C24.2867325,19.6337621 24.7087625,19.7144643 25.1343634,19.7124228 C25.5639414,19.7142067 25.9874241,19.6095475 26.367867,19.4075759 C26.7538642,19.2057551 27.0987784,18.9320113 27.3845068,18.6007107 C27.6779444,18.2650427 27.9116272,17.8803768 28.075158,17.4638278 C28.2398139,17.0470682 28.3246605,16.6024047 28.3251735,16.1535458 L28.3389868,6.86131096 L32.5713001,6.86131096 L32.5464367,23.6712364 L31.52151,23.6712364 L30.1236311,21.730285 C29.7771589,22.0476765 29.4118105,22.343288 29.0296393,22.6154595 C28.6446504,22.8903813 28.2370494,23.131322 27.8113292,23.3356253 C27.3901563,23.5381028 26.95132,23.7005462 26.5004722,23.8208631 C26.0528131,23.940232 25.591766,24.0003967 25.1288383,23.999953 C24.1412651,24.0034349 23.1623395,23.8134919 22.2460587,23.4405037 C20.4303288,22.7127885 18.9969275,21.2510225 18.2913875,19.4075759 C17.892763,18.3695149 17.6971384,17.2629413 17.7153847,16.1493507 L17.7291967,6.8571158 L21.9463164,6.8571158 Z",
  "M39.7424665,0 L39.7299078,7.90546388 C39.9688999,7.6022421 40.2510435,7.33640837 40.5671629,7.11660797 C40.8985215,6.88573562 41.2565328,6.69651618 41.6332691,6.55313936 C42.0171126,6.40559506 42.4130819,6.29246421 42.8165901,6.21505817 C43.2087815,6.1380393 43.607345,6.09888936 44.0068876,6.0981385 C45.1573528,6.09072863 46.2971261,6.32132631 47.3559104,6.77570939 C48.3755127,7.21281864 49.2982887,7.85124301 50.0700126,8.65346839 C50.8532679,9.47421382 51.4737556,10.4386439 51.8980206,11.4947587 C52.3559553,12.6332903 52.5846045,13.8525135 52.570616,15.0812361 C52.5839328,16.3265548 52.3529712,17.5622212 51.8910441,18.7170169 C51.4683309,19.7688639 50.8443003,20.7262402 50.0546629,21.5343597 C49.2780971,22.3199166 48.3526392,22.9393912 47.3335829,23.3557717 C46.2702728,23.7913887 45.1320488,24.0101826 43.9845613,23.9995346 C41.7142415,24.0112795 39.53432,23.1023081 37.9339949,21.4766041 C37.1443257,20.6652734 36.5203663,19.705135 36.097615,18.6508093 C35.6405895,17.5081983 35.4133739,16.2851993 35.4292062,15.0530626 L35.4515324,0 L39.7424665,0 Z",
  "M67.1766416,8.99279936 C68.585031,10.7323096 69.2817025,12.9675185 69.1194796,15.2262308 C69.1194796,15.4939443 69.1090632,15.7877761 69.0882302,16.1077262 C69.0673986,16.4276764 69.047019,16.7112473 69.0270927,16.9584392 L58.8795014,16.9430481 C58.9581372,17.8570607 59.4308922,18.6864913 60.167481,19.2027544 C61.0778189,19.8045276 62.1480928,20.0980655 63.2284694,20.0422738 C64.0392979,20.0444987 64.8485315,19.968139 65.6454681,19.8142044 C66.309741,19.6987947 66.9595212,19.5078004 67.5828711,19.2447303 L68.1779507,22.9875877 C67.8677868,23.1379053 67.5460472,23.2614587 67.2160421,23.3569762 C66.776435,23.489239 66.3301396,23.596671 65.8791522,23.678792 C65.3882348,23.7720719 64.8628985,23.8485615 64.3031445,23.9082606 C63.7444305,23.9689182 63.1829712,23.9988104 62.6211626,23.9978094 C61.3565315,24.024156 60.0986203,23.8019119 58.9148257,23.3429842 C57.928667,22.952649 57.0377271,22.3441364 56.3049021,21.5604047 C55.6091245,20.7960843 55.0874517,19.8817071 54.7778047,18.883737 C54.4418403,17.8046404 54.276246,16.6770006 54.2873406,15.5438491 C54.2628048,14.2497154 54.4838681,12.9630995 54.9381228,11.7562173 C55.3236311,10.7472481 55.9015564,9.82806803 56.6377668,9.05296483 C57.3262123,8.34211103 58.150063,7.78568683 59.0574816,7.41870048 C59.9509828,7.05241102 60.9040787,6.86483729 61.8657663,6.86601684 C63.8492708,6.76431934 65.7808821,7.53784871 67.1766416,8.99279936 Z",
  "M72.7407973,18.4887646 C73.0435186,18.6190908 73.3189054,18.8053747 73.5524931,19.0378308 C73.7840947,19.2708754 73.9677727,19.5470269 74.0931462,19.8506781 C74.2230872,20.1656389 74.2884355,20.5034774 74.2853143,20.8441582 C74.2874743,21.1921325 74.2207012,21.5370916 74.088844,21.8591423 C73.9643784,22.1653118 73.7800896,22.4435981 73.5467572,22.677724 C73.3127086,22.909923 73.03681,23.0957379 72.7336265,23.2253566 C72.091803,23.4961865 71.3677221,23.4961865 70.7258986,23.2253566 C70.41855,23.0950869 70.1383632,22.9083604 69.8998613,22.6748569 C69.662534,22.4408161 69.47391,22.1621192 69.3448679,21.8548416 C69.2087834,21.5338836 69.1399633,21.1884445 69.1426605,20.8398576 C69.1414325,20.4985342 69.2112723,20.1606905 69.3477365,19.847811 C69.4791379,19.5436494 69.6686304,19.2680314 69.9055971,19.0363972 C70.1448317,18.8038503 70.4254858,18.6181093 70.7330694,18.4887646 C71.3748929,18.2179347 72.0989738,18.2179347 72.7407973,18.4887646 Z",
  "M61.9214689,10.6704389 C61.4774085,10.657869 61.0361556,10.7467479 60.6294144,10.9306899 C60.2836837,11.0949354 59.9760862,11.3334766 59.7272859,11.6302894 C59.4823434,11.9264197 59.2934083,12.2671661 59.1702481,12.6349142 C59.0407337,13.0113281 58.9447798,13.3991092 58.8835775,13.7934511 L64.7976848,13.7976487 C64.7787604,13.4094793 64.7139746,13.0251314 64.6047598,12.6531039 C64.5003577,12.2916639 64.327679,11.9550136 64.0966323,11.662471 C63.8573761,11.3660779 63.5613798,11.1236391 63.2271107,10.9502787 C62.8197066,10.7513703 62.372102,10.6554344 61.9214689,10.6704389 Z"
];

const LoadingWithSVG: React.FC<LoadingWithSVGProps> = ({progress}) => {
  const delta = 1 / paths.length;
  
  const widthPath = width * 35.7 / 100;
  const dx = width*width/height - widthPath;
  
  const H = height*0.2;
  const heightPath = H * 33.4/100;
  const dy = -H/2+heightPath;

  return (
    <Svg
      height={H} 
      width={width} 
      fill="red" 
      fillRule="evenodd" 
      viewBox={`${-dx} ${dy} ${width*width/height} ${H*width/height}`}>
      <G stroke="none" strokeWidth="1">
        <G transform="translate(-143.000000, -16.000000)" fill="#FFFFFF" fillRule="nonzero">
          <G transform="translate(143.000000, 16.000000)">
            {
              paths.map((p, i) => {
                const start = i * delta;
                const end = start + delta;

                const scale = interpolate(progress, {
                  inputRange: [start, end],
                  outputRange: [1, 1.3],
                  extrapolate: Extrapolate.CLAMP,
                });

                
                return (
                  <AnimatedPath key={i} style={
                    {
                      transform: [
                        {translateX: multiply(scale, 10) },
                        {translateY: multiply(scale, 10) },
                        { scale },
                        {translateX: multiply(scale, -10) },
                        {translateY: multiply(scale, -10) },
                      ]
                    }
                  } 
                  d={p} stroke="#B620E0" />    
                )}
              )
            }
          </G>
        </G>
      </G>
    </Svg>
  );
}

export default LoadingWithSVG;